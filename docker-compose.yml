---
version: '3'
services:
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - user-post-network
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - user-post-network

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_started
    restart: on-failure
    networks:
      - user-post-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  postgres1:
    container_name: postgres1
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userpostapp_user
      # - POSTGRES_MULTIPLE_DATABASES="userpostapp_user","userpostapp_post" 
    ports:
      - "54320:5432"
    volumes: 
      - postgres1:/var/lib/postgresql/data
      # - ./init1.sql:/docker-entrypoint-initdb.d/init1.sql
      # - ./create_user_db.sh:/docker-entrypoint-initdb.d/create_user_db.sh
    # entrypoint:
    #   - docker-entrypoint.sh
    #   - create_user_db
    networks:
      - user-post-network
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3

  postgres2:
    container_name: postgres2
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userpostapp_post
      # - POSTGRES_MULTIPLE_DATABASES="userpostapp_user","userpostapp_post" 
    ports:
      - "54321:5432"
    volumes: 
      - postgres2:/var/lib/postgresql/data
      # - ./init2.sql:/docker-entrypoint-initdb.d/init2.sql
      # - ./create_post_db.sh:/docker-entrypoint-initdb.d/create_post_db.sh
    # entrypoint:
    #   - docker-entrypoint.sh
    #   - create_post_db
    networks:
      - user-post-network
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3

  naming-server:
    container_name: naming-server
    image: emirgarip/eureka-server:0.0.1-SNAPSHOT
    # mem_limit: 900m
    ports:
      - "8761:8761"
    networks:
      - user-post-network
    # depends_on:
    #   cloud-config: 
    #     condition: service_started
    restart: on-failure
    # command: 
    #   - sh -c './wait-for http://cloud-config:8887/user-service/dev -- echo "The config server is up! Let's use it"'
    environment:
      # spring.config.import: optional:configserver:http://cloud-config:8887
      # spring.cloud.config.profile: dev
      eureka.client.register-with-eureka: false 
      eureka.client.fetch-registry: false

  api-gateway:
    container_name: api-gateway
    image: emirgarip/spring-cloud-api-gateway:0.0.1-SNAPSHOT
    # mem_limit: 900m
    ports:
      - "8765:8765"
    networks:
      - user-post-network
    depends_on:
      naming-server: 
        condition: service_started
    restart: on-failure
    environment:
      eureka.client.serviceUrl.defaultZone: http://naming-server:8761/eureka
      spring.sleuth.sampler.probability: 1.0
      spring.zipkin.baseUrl: http://zipkin:9411/


  user-service:
    container_name: user-service
    image: emirgarip/user-service:0.0.1-SNAPSHOT
    # mem_limit: 900m
    ports:
      - "8080:8080"
    networks:
      - user-post-network
    depends_on:
      # cloud-config:
      #   condition: service_started
      naming-server:
        condition: service_started
      postgres1:
        condition: service_started
      zipkin:
        condition: service_started
      broker:
        condition: service_started
    restart: on-failure
    # command: 
    #   - sh -c './wait-for http://cloud-config:8887/user-service/dev -- echo "The config server is up! Let's use it"'
    #   - sh -c './wait-for http://naming-server:8761/eureka -- echo "The naming server is up! Let's use it"'
    environment:
      # spring.config.import: optional:configserver:http://cloud-config:8887
      # spring.cloud.config.profile: dev
      spring.datasource.url: jdbc:postgresql://postgres1:5432/userpostapp_user?currentSchema=public
      eureka.client.serviceUrl.defaultZone: http://naming-server:8761/eureka
      # eureka.instance.prefer-ip-address: true
      spring.datasource.username: postgres
      spring.datasource.password: password
      spring.datasource.initialization-mode: always
      spring.kafka.consumer.bootstrap-servers: host.docker.internal:9092
      spring.zipkin.baseUrl: http://zipkin:9411/

  post-service:
    container_name: post-service
    image: emirgarip/post-service:0.0.1-SNAPSHOT
    # mem_limit: 900m
    ports:
      - "8081:8081"
    networks:
      - user-post-network
    depends_on:
      # cloud-config:
      #   condition: service_started
      naming-server:
        condition: service_started
      postgres2:
        condition: service_started
      zipkin:
        condition: service_started
      broker:
        condition: service_started
    restart: on-failure
    # command: 
    #   - sh -c './wait-for http://cloud-config:8887/user-service/dev -- echo "The config server is up! Let's use it"'
    #   - sh -c './wait-for http://naming-server:8761/eureka -- echo "The naming server is up! Let's use it"'
    environment:
      # spring.config.import: optional:configserver:http://cloud-config:8887
      # spring.cloud.config.profile: dev
      spring.datasource.url: jdbc:postgresql://postgres2:5432/userpostapp_post?currentSchema=public
      eureka.client.serviceUrl.defaultZone: http://naming-server:8761/eureka
      # eureka.instance.prefer-ip-address: true
      spring.datasource.username: postgres
      spring.datasource.password: password
      spring.datasource.initialization-mode: always
      spring.kafka.producer.bootstrap-servers: host.docker.internal:9092
      spring.zipkin.baseUrl: http://zipkin:9411/
  
networks:
  user-post-network:
    driver: bridge

volumes:
  postgres1:
    driver: local
  postgres2:
    driver: local

  # postgres2:
  #   container_name: postgres_post
  #   image: postgres:14.1-alpine
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=password
  #     - POSTGRES_DB=userpostapp_post
  #   ports:
  #     - "5431:5431"
  #   volumes: 
  #     - postgres:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - user-post-network
  #   # healthcheck:
  #   #   test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d postgres'"]
  #   #   interval: 10s
  #   #   timeout: 3s
  #   #   retries: 3
    
  # cloud-config:
  #   container_name: cloud-config
  #   image: emirgarip/spring-cloud-config:0.0.1-SNAPSHOT
  #   # mem_limit: 900m
  #   ports:
  #     - "8887:8887"
  #   networks:
  #     - user-post-network
  #   environment:
  #     spring.cloud.config.server.git.uri: https://github.com/emirgarip/user-post-app-configurations
  #   # healthcheck:
  #   #   test: ["CMD", "curl", "-f", "http://localhost:8887/actuator/health"]
  #   #   # test: ["CMD", "curl", "-f", "http://cloud-config:8887/user-service/dev"]
  #   #   interval: 30s
  #   #   timeout: 10s
  #   #   retries: 3